/**
 * SQLite Database Setup for Development
 * This provides a quick start alternative to MySQL
 */

import sqlite3 from 'sqlite3';
import { open } from 'sqlite';
import { join } from 'path';
import fs from 'fs';

// SQLite database path
const DB_PATH = join(process.cwd(), 'data', 'turkish_learning.db');

// Ensure data directory exists
const dataDir = join(process.cwd(), 'data');
if (!fs.existsSync(dataDir)) {
    fs.mkdirSync(dataDir, { recursive: true });
}

/**
 * Open SQLite database connection
 */
export async function openDatabase() {
    return open({
        filename: DB_PATH,
        driver: sqlite3.Database
    });
}

/**
 * Initialize SQLite database with schema
 */
export async function initializeSQLiteDatabase() {
    try {
        console.log('üîÑ Initializing SQLite database...');
        
        const db = await openDatabase();
        
        // Enable foreign keys
        await db.exec('PRAGMA foreign_keys = ON');
        
        // Create tables
        await createTables(db);
        
        // Insert sample data
        await insertSampleData(db);
        
        await db.close();
        
        console.log('‚úÖ SQLite database initialized successfully!');
        console.log(`üìç Database location: ${DB_PATH}`);
        
    } catch (error) {
        console.error('‚ùå SQLite initialization failed:', error);
        throw error;
    }
}

/**
 * Create database tables
 */
async function createTables(db) {
    const tables = [
        // Users table
        `CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            email VARCHAR(255) NOT NULL UNIQUE,
            username VARCHAR(50) NOT NULL UNIQUE,
            name VARCHAR(100) NOT NULL,
            password_hash VARCHAR(255),
            avatar_url TEXT,
            native_language VARCHAR(10) DEFAULT 'en',
            target_language VARCHAR(10) DEFAULT 'tr',
            level TEXT DEFAULT 'beginner',
            daily_goal INTEGER DEFAULT 10,
            notifications_enabled BOOLEAN DEFAULT 1,
            sound_enabled BOOLEAN DEFAULT 1,
            email_verified BOOLEAN DEFAULT 0,
            is_active BOOLEAN DEFAULT 1,
            is_premium BOOLEAN DEFAULT 0,
            premium_expires_at DATETIME,
            google_id VARCHAR(255) UNIQUE,
            facebook_id VARCHAR(255) UNIQUE,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            last_login_at DATETIME
        )`,
        
        // Categories table
        `CREATE TABLE IF NOT EXISTS categories (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name VARCHAR(100) NOT NULL,
            name_tr VARCHAR(100) NOT NULL,
            description TEXT,
            description_tr TEXT,
            icon VARCHAR(50),
            color VARCHAR(7),
            sort_order INTEGER DEFAULT 0,
            is_active BOOLEAN DEFAULT 1,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )`,
        
        // Vocabulary table
        `CREATE TABLE IF NOT EXISTS vocabulary (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            category_id INTEGER NOT NULL,
            turkish_text VARCHAR(255) NOT NULL,
            turkish_pronunciation VARCHAR(255),
            english_text VARCHAR(255),
            english_definition TEXT,
            arabic_text VARCHAR(255),
            example_sentence_tr TEXT,
            example_sentence_en TEXT,
            example_sentence_ar TEXT,
            word_type TEXT DEFAULT 'noun',
            difficulty_level TEXT DEFAULT 'beginner',
            audio_url VARCHAR(255),
            image_url VARCHAR(255),
            svg_icon TEXT,
            frequency_score INTEGER DEFAULT 0,
            tags TEXT,
            is_active BOOLEAN DEFAULT 1,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (category_id) REFERENCES categories(id)
        )`,
        
        // User stats table
        `CREATE TABLE IF NOT EXISTS user_stats (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL UNIQUE,
            total_xp INTEGER DEFAULT 0,
            level INTEGER DEFAULT 1,
            coins INTEGER DEFAULT 0,
            sessions_completed INTEGER DEFAULT 0,
            total_study_time_seconds INTEGER DEFAULT 0,
            words_learned INTEGER DEFAULT 0,
            words_mastered INTEGER DEFAULT 0,
            current_streak_days INTEGER DEFAULT 0,
            longest_streak_days INTEGER DEFAULT 0,
            last_activity_date DATE,
            total_questions_answered INTEGER DEFAULT 0,
            total_correct_answers INTEGER DEFAULT 0,
            overall_accuracy REAL DEFAULT 0.0,
            achievements_unlocked INTEGER DEFAULT 0,
            badges_earned INTEGER DEFAULT 0,
            weekly_rank INTEGER,
            monthly_rank INTEGER,
            all_time_rank INTEGER,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users(id)
        )`,
        
        // User vocabulary progress table
        `CREATE TABLE IF NOT EXISTS user_vocabulary_progress (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            vocabulary_id INTEGER NOT NULL,
            mastery_level TEXT DEFAULT 'new',
            confidence_score REAL DEFAULT 0.0,
            times_seen INTEGER DEFAULT 0,
            times_correct INTEGER DEFAULT 0,
            times_incorrect INTEGER DEFAULT 0,
            streak_count INTEGER DEFAULT 0,
            best_streak INTEGER DEFAULT 0,
            next_review_at DATETIME,
            ease_factor REAL DEFAULT 2.5,
            interval_days INTEGER DEFAULT 1,
            first_seen_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            last_seen_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            mastered_at DATETIME,
            FOREIGN KEY (user_id) REFERENCES users(id),
            FOREIGN KEY (vocabulary_id) REFERENCES vocabulary(id),
            UNIQUE(user_id, vocabulary_id)
        )`,
        
        // Learning sessions table
        `CREATE TABLE IF NOT EXISTS learning_sessions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            session_type TEXT NOT NULL,
            category_id INTEGER,
            lesson_id INTEGER,
            total_questions INTEGER DEFAULT 0,
            correct_answers INTEGER DEFAULT 0,
            incorrect_answers INTEGER DEFAULT 0,
            skipped_answers INTEGER DEFAULT 0,
            accuracy_percentage REAL DEFAULT 0.0,
            duration_seconds INTEGER DEFAULT 0,
            xp_earned INTEGER DEFAULT 0,
            coins_earned INTEGER DEFAULT 0,
            session_data TEXT,
            started_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            completed_at DATETIME,
            FOREIGN KEY (user_id) REFERENCES users(id),
            FOREIGN KEY (category_id) REFERENCES categories(id)
        )`
    ];
    
    for (const table of tables) {
        await db.exec(table);
    }
    
    console.log('‚úÖ Tables created successfully');
}

/**
 * Insert sample data
 */
async function insertSampleData(db) {
    // Insert categories
    const categories = [
        ['Greetings', 'Selamla≈üma', 'Basic greetings and introductions', 'wave', '#4F46E5', 1],
        ['Family', 'Aile', 'Family members and relationships', 'users', '#059669', 2],
        ['Food & Drink', 'Yemek ve ƒ∞√ßecek', 'Food, drinks, and dining', 'utensils', '#DC2626', 3],
        ['Numbers', 'Sayƒ±lar', 'Numbers and counting', 'hash', '#7C2D12', 4],
        ['Colors', 'Renkler', 'Colors and descriptions', 'palette', '#9333EA', 5],
        ['Time', 'Zaman', 'Time, dates, and calendar', 'clock', '#0891B2', 6],
        ['Travel', 'Seyahat', 'Travel and transportation', 'plane', '#EA580C', 7],
        ['Shopping', 'Alƒ±≈üveri≈ü', 'Shopping and commerce', 'shopping-cart', '#16A34A', 8],
        ['Work', 'ƒ∞≈ü', 'Work and professional life', 'briefcase', '#374151', 9],
        ['Daily Life', 'G√ºnl√ºk Ya≈üam', 'Daily activities and routines', 'home', '#6366F1', 10]
    ];
    
    for (const category of categories) {
        await db.run(
            `INSERT OR IGNORE INTO categories (name, name_tr, description, icon, color, sort_order) 
             VALUES (?, ?, ?, ?, ?, ?)`,
            category
        );
    }
    
    // Insert sample vocabulary
    const vocabulary = [
        // Greetings (category_id: 1)
        [1, 'Merhaba', 'ŸÖÿ±ÿ≠ÿ®ÿß', 'Hello', 'expression', 'beginner', 'Merhaba, nasƒ±lsƒ±n?', 'Hi, how are you?', 'ŸÖÿ±ÿ≠ÿ®ÿßÿå ŸÉŸäŸÅ ÿ≠ÿßŸÑŸÉÿü', 'fas fa-hand-peace'],
        [1, 'G√ºnaydƒ±n', 'ÿµÿ®ÿßÿ≠ ÿßŸÑÿÆŸäÿ±', 'Good morning', 'expression', 'beginner', 'G√ºnaydƒ±n, iyi misin?', 'Good morning, are you well?', 'ÿµÿ®ÿßÿ≠ ÿßŸÑÿÆŸäÿ±ÿå ŸÉŸäŸÅ ÿ≠ÿßŸÑŸÉÿü', 'fas fa-sun'],
        [1, 'ƒ∞yi ak≈üamlar', 'ŸÖÿ≥ÿßÿ° ÿßŸÑÿÆŸäÿ±', 'Good evening', 'expression', 'beginner', 'ƒ∞yi ak≈üamlar, nasƒ±lsƒ±nƒ±z?', 'Good evening, how are you?', 'ŸÖÿ≥ÿßÿ° ÿßŸÑÿÆŸäÿ±ÿå ŸÉŸäŸÅ ÿ≠ÿßŸÑŸÉŸÖÿü', 'fas fa-moon'],
        [1, 'Ho≈ü√ßa kal', 'ŸÖÿπ ÿßŸÑÿ≥ŸÑÿßŸÖÿ©', 'Goodbye', 'expression', 'beginner', 'Ho≈ü√ßa kal, g√∂r√º≈ü√ºr√ºz!', 'Goodbye, see you later!', 'ŸÖÿπ ÿßŸÑÿ≥ŸÑÿßŸÖÿ©ÿå ŸÜÿ±ÿßŸÉŸÖ ŸÑÿßÿ≠ŸÇÿßŸã!', 'fas fa-hand-wave'],
        [1, 'Te≈üekk√ºr ederim', 'ÿ¥ŸÉÿ±ÿßŸã', 'Thank you', 'expression', 'beginner', 'Te≈üekk√ºr ederim, √ßok yardƒ±mcƒ± oldun.', 'Thank you, you were very helpful.', 'ÿ¥ŸÉÿ±ÿßŸã ŸÑŸÉÿå ŸÑŸÇÿØ ŸÉŸÜÿ™ ŸÖŸÅŸäÿØÿßŸã ÿ¨ÿØÿßŸã.', 'fas fa-heart'],
        
        // Family (category_id: 2)
        [2, 'Anne', 'ÿ£ŸÖ', 'Mother', 'noun', 'beginner', 'Annem √ßok g√ºzel yemek yapar.', 'My mother cooks very well.', 'ÿ£ŸÖŸä ÿ™ÿ∑ÿ®ÿÆ ÿ®ÿ¥ŸÉŸÑ ÿ¨ŸÖŸäŸÑ ÿ¨ÿØÿßŸã.', 'fas fa-user'],
        [2, 'Baba', 'ÿ£ÿ®', 'Father', 'noun', 'beginner', 'Babam her g√ºn gazete okur.', 'My father reads the newspaper every day.', ' papam ŸäŸÇÿ±ÿ£ ÿßŸÑÿ¨ÿ±ŸäÿØÿ© ŸÉŸÑ ŸäŸàŸÖ.', 'fas fa-user'],
        [2, 'Karde≈ü', 'ÿ£ÿÆ/ÿ£ÿÆÿ™', 'Sibling', 'noun', 'beginner', 'Karde≈üimle √ßok iyi anla≈üƒ±yorum.', 'I get along very well with my sibling.', 'ÿ£ÿ™ŸÅŸáŸÖ ÿ£ÿÆŸä/ÿ£ÿÆÿ™Ÿä ÿ¨ŸäÿØÿßŸã.', 'fas fa-users'],
        [2, '√áocuk', 'ÿ∑ŸÅŸÑ', 'Child', 'noun', 'beginner', '√áocuklar oyun oynamayƒ± sever.', 'Children love to play games.', 'ÿßŸÑÿ£ÿ∑ŸÅÿßŸÑ Ÿäÿ≠ÿ®ŸàŸÜ ŸÑÿπÿ® ÿßŸÑÿ£ŸÑÿπÿßÿ®.', 'fas fa-child'],
        [2, 'Aile', 'ÿπÿßÿ¶ŸÑÿ©', 'Family', 'noun', 'beginner', 'Ailemle her hafta sonu bulu≈üuruz.', 'We meet with my family every weekend.', 'ŸÜÿ™ŸÇÿßÿ®ŸÑ ŸÖÿπ ÿπÿßÿ¶ŸÑÿ™Ÿä ŸÉŸÑ ÿπÿ∑ŸÑÿ© ŸÜŸáÿßŸäÿ© ÿ£ÿ≥ÿ®Ÿàÿπ.', 'fas fa-home'],
        
        // Food & Drink (category_id: 3)
        [3, 'Su', 'ŸÖÿßÿ°', 'Water', 'noun', 'beginner', 'Su i√ßmek √∂nemlidir.', 'It is important to drink water.', 'ŸÖŸÜ ÿßŸÑŸÖŸáŸÖ ÿ¥ÿ±ÿ® ÿßŸÑŸÖÿßÿ°.', 'fas fa-tint'],
        [3, 'Ekmek', 'ÿÆÿ®ÿ≤', 'Bread', 'noun', 'beginner', 'Her sabah ekmek yerim.', 'I eat bread every morning.', 'ÿ¢ŸÉŸÑ ÿßŸÑÿÆÿ®ÿ≤ ŸÉŸÑ ÿµÿ®ÿßÿ≠.', 'fas fa-bread-slice'],
        [3, '√áay', 'ÿ¥ÿßŸä', 'Tea', 'noun', 'beginner', '√áay i√ßmek √ßok yaygƒ±ndƒ±r.', 'Drinking tea is very common.', 'ÿ¥ÿ±ÿ® ÿßŸÑÿ¥ÿßŸä ÿ£ŸÖÿ± ÿ¥ÿßÿ¶ÿπ ÿ¨ÿØÿßŸã.', 'fas fa-mug-hot'],
        [3, 'Kahve', 'ŸÇŸáŸàÿ©', 'Coffee', 'noun', 'beginner', 'Kahve sabahlarƒ± harikadƒ±r.', 'Coffee is great in the mornings.', 'ÿßŸÑŸÇŸáŸàÿ© ÿ±ÿßÿ¶ÿπÿ© ŸÅŸä ÿßŸÑÿµÿ®ÿßÿ≠.', 'fas fa-coffee'],
        [3, 'Yemek', 'ÿ∑ÿπÿßŸÖ', 'Food/Meal', 'noun', 'beginner', 'Bug√ºn ne yemek yapmalƒ±yƒ±m?', 'What should I cook today?', 'ŸÖÿßÿ∞ÿß Ÿäÿ¨ÿ® ÿ£ŸÜ ÿ£ÿ∑ÿ®ÿÆ ÿßŸÑŸäŸàŸÖÿü', 'fas fa-utensils'],
        
        // Numbers (category_id: 4)
        [4, 'Bir', 'Ÿàÿßÿ≠ÿØ', 'One', 'noun', 'beginner', 'Bir elma alabilir miyim?', 'Can I have an apple?', 'ŸáŸÑ ŸäŸÖŸÉŸÜŸÜŸä ÿßŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ÿ™ŸÅÿßÿ≠ÿ©ÿü', 'fas fa-dice-one'],
        [4, 'ƒ∞ki', 'ÿßÿ´ŸÜÿßŸÜ', 'Two', 'noun', 'beginner', 'ƒ∞ki kitap okudum.', 'I read two books.', 'ŸÇÿ±ÿ£ÿ™ ŸÉÿ™ÿßÿ®ŸäŸÜ.', 'fas fa-dice-two'],
        [4, '√ú√ß', 'ÿ´ŸÑÿßÿ´ÿ©', 'Three', 'noun', 'beginner', '√ú√ß √ßocuk sahibiyim.', 'I have three children.', 'ŸÑÿØŸä ÿ´ŸÑÿßÿ´ÿ© ÿ£ÿ∑ŸÅÿßŸÑ.', 'fas fa-dice-three'],
        [4, 'D√∂rt', 'ÿ£ÿ±ÿ®ÿπÿ©', 'Four', 'noun', 'beginner', 'D√∂rt mevsim vardƒ±r.', 'There are four seasons.', 'ŸáŸÜÿßŸÉ ÿ£ÿ±ÿ®ÿπÿ© ŸÅÿµŸàŸÑ.', 'fas fa-dice-four'],
        [4, 'Be≈ü', 'ÿÆŸÖÿ≥ÿ©', 'Five', 'noun', 'beginner', 'Be≈ü dakika bekle.', 'Wait five minutes.', 'ÿßŸÜÿ™ÿ∏ÿ± ÿÆŸÖÿ≥ ÿØŸÇÿßÿ¶ŸÇ.', 'fas fa-dice-five'],
        
        // Colors (category_id: 5)
        [5, 'Kƒ±rmƒ±zƒ±', 'ÿ£ÿ≠ŸÖÿ±', 'Red', 'adjective', 'beginner', 'Kƒ±rmƒ±zƒ± elbise √ßok g√ºzel.', 'The red dress is very beautiful.', 'ÿßŸÑŸÅÿ≥ÿ™ÿßŸÜ ÿßŸÑÿ£ÿ≠ŸÖÿ± ÿ¨ŸÖŸäŸÑ ÿ¨ÿØÿßŸã.', 'fas fa-circle'],
        [5, 'Mavi', 'ÿ£ÿ≤ÿ±ŸÇ', 'Blue', 'adjective', 'beginner', 'G√∂ky√ºz√º mavi.', 'The sky is blue.', 'ÿßŸÑÿ≥ŸÖÿßÿ° ÿ≤ÿ±ŸÇÿßÿ°.', 'fas fa-circle'],
        [5, 'Ye≈üil', 'ÿ£ÿÆÿ∂ÿ±', 'Green', 'adjective', 'beginner', 'Ye≈üil renk doƒüayƒ± andƒ±rƒ±r.', 'Green color reminds of nature.', 'ÿßŸÑŸÑŸàŸÜ ÿßŸÑÿ£ÿÆÿ∂ÿ± Ÿäÿ∞ŸÉÿ±ŸÜÿß ÿ®ÿßŸÑÿ∑ÿ®Ÿäÿπÿ©.', 'fas fa-circle'],
        [5, 'Sarƒ±', 'ÿ£ÿµŸÅÿ±', 'Yellow', 'adjective', 'beginner', 'Sarƒ± √ßi√ßekler baharƒ± getirir.', 'Yellow flowers bring spring.', 'ÿßŸÑÿ≤ŸáŸàÿ± ÿßŸÑÿµŸÅÿ±ÿßÿ° ÿ™ÿ¨ŸÑÿ® ÿßŸÑÿ±ÿ®Ÿäÿπ.', 'fas fa-circle'],
        [5, 'Beyaz', 'ÿ£ÿ®Ÿäÿ∂', 'White', 'adjective', 'beginner', 'Beyaz kar √ßok g√ºzel.', 'White snow is very beautiful.', 'ÿßŸÑÿ´ŸÑÿ¨ ÿßŸÑÿ£ÿ®Ÿäÿ∂ ÿ¨ŸÖŸäŸÑ ÿ¨ÿØÿßŸã.', 'fas fa-circle']
    ];
    
    for (const vocab of vocabulary) {
        await db.run(
            `INSERT OR IGNORE INTO vocabulary (category_id, turkish_text, arabic_text, english_text, word_type, difficulty_level, example_sentence_tr, example_sentence_en, example_sentence_ar, svg_icon) 
             VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            vocab
        );
    }
    
    console.log('‚úÖ Sample data inserted successfully');
}

/**
 * Check if SQLite database exists and is initialized
 */
export async function checkSQLiteDatabase() {
    try {
        if (!fs.existsSync(DB_PATH)) {
            return false;
        }
        
        const db = await openDatabase();
        const result = await db.get("SELECT name FROM sqlite_master WHERE type='table' AND name='users'");
        await db.close();
        
        return !!result;
    } catch (error) {
        return false;
    }
}

/**
 * Reset SQLite database
 */
export async function resetSQLiteDatabase() {
    try {
        if (fs.existsSync(DB_PATH)) {
            fs.unlinkSync(DB_PATH);
            console.log('üóëÔ∏è Old database deleted');
        }
        
        await initializeSQLiteDatabase();
        console.log('‚úÖ Database reset completed');
    } catch (error) {
        console.error('‚ùå Database reset failed:', error);
        throw error;
    }
}